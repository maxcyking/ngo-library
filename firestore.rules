rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // DEVELOPMENT RULES - More permissive for testing
    // TODO: Replace with production rules before going live
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Admin check based on users collection
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isActive == true;
    }
    
    // Validate application data structure
    function isValidApplication(data) {
      return data.keys().hasAll(['name', 'fatherHusbandName', 'phone', 'applicationType', 'status']) &&
             data.name is string && data.name.size() > 0 &&
             data.fatherHusbandName is string && data.fatherHusbandName.size() > 0 &&
             data.phone is string && data.phone.size() > 0 &&
             data.applicationType in ['library', 'member'] &&
             data.status in ['pending', 'approved', 'rejected'];
    }
    
    // Validate student data structure
    function isValidStudent(data) {
      return data.keys().hasAll(['name', 'fatherHusbandName', 'phone', 'status']) &&
             data.name is string && data.name.size() > 0 &&
             data.fatherHusbandName is string && data.fatherHusbandName.size() > 0 &&
             data.phone is string && data.phone.size() > 0 &&
             data.status in ['active', 'inactive', 'suspended'];
    }
    
    // Users collection
    match /users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId; // Users can manage their own data
      allow create: if isAuthenticated(); // Allow user creation
      allow read, list: if isAdmin(); // Admins can read all users
    }
    
    // Students collection - Main collection for student management
    match /students/{studentId} {
      allow read, list: if isAdmin(); // Only admins can view student records
      allow create: if isAdmin() && isValidStudent(request.resource.data); // Only admins can create valid students
      allow update: if isAdmin() && isValidStudent(request.resource.data); // Only admins can update with valid data
      allow delete: if isAdmin(); // Only admins can delete students
    }
    
    // Library applications collection - Public applications from website
    match /library-applications/{applicationId} {
      allow create: if isValidApplication(request.resource.data) && 
                       request.resource.data.status == 'pending'; // Anyone can submit valid applications with pending status
      allow read, list: if isAdmin(); // Only admins can view applications
      allow update: if isAdmin() && 
                       isValidApplication(request.resource.data); // Only admins can update with valid data
      allow delete: if isAdmin(); // Only admins can delete applications
    }
    
    // Hero images for UI management
    match /heroImages/{imageId} {
      allow read: if true; // Public read access for website display
      allow write, create, delete, list: if isAuthenticated();
    }
    
    // UI content management
    match /uiContent/{contentId} {
      allow read: if true; // Public read access for website display
      allow write, create, delete, list: if isAuthenticated();
    }
    
    // Books collection
    match /books/{bookId} {
      allow read: if true; // Public read access for library browsing
      allow write, create, delete, list: if isAuthenticated();
    }
    
    // Book categories collection
    match /book-categories/{categoryId} {
      allow read: if true; // Public read access for library browsing
      allow write, create, delete, list: if isAdmin(); // Only admins can manage categories
    }
    
    // Book transactions collection
    match /bookTransactions/{transactionId} {
      allow read, list: if isAdmin(); // Only admins can view book transactions
      allow write, create, delete: if isAdmin(); // Only admins can manage book transactions
    }
    
    // Events collection
    match /events/{eventId} {
      allow read: if true; // Public read access for event browsing
      allow write, create, delete, list: if isAdmin();
    }
    
    // Event registrations collection
    match /eventRegistrations/{registrationId} {
      allow read, write, create, delete, list: if isAuthenticated();
    }
    
    // Event registrations collection (alternative naming)
    match /event-registrations/{registrationId} {
      allow read, write, create, delete, list: if isAuthenticated();
    }
    
    // Members collection
    match /members/{memberId} {
      allow read, list: if isAdmin(); // Only admins can view member records
      allow write, create, delete: if isAdmin(); // Only admins can manage members
    }
    
    // Library transactions
    match /transactions/{transactionId} {
      allow read, list: if isAdmin(); // Only admins can view transactions
      allow write, create, delete: if isAdmin(); // Only admins can manage transactions
    }
    
    // News articles collection
    match /newsArticles/{articleId} {
      allow read: if true; // Public read access for website display
      allow write, create, delete, list: if isAdmin(); // Only admins can manage news
    }
    
    // News categories collection
    match /newsCategories/{categoryId} {
      allow read: if true; // Public read access
      allow write, create, delete, list: if isAdmin(); // Only admins can manage categories
    }
    
    // News tags collection
    match /newsTags/{tagId} {
      allow read: if true; // Public read access
      allow write, create, delete, list: if isAdmin(); // Only admins can manage tags
    }

    // Media/Gallery collection
    match /media/{mediaId} {
      allow read: if true; // Public read access for website display
      allow write, create, delete, list: if isAdmin(); // Only admins can manage media
    }

    // Library Applications collection
    match /library-applications/{applicationId} {
      allow create: if true; // Anyone can submit application
      allow read: if true; // Public read for tracking (users can track their applications)
      allow update: if isAdmin(); // Only admins can update (status, remarks, etc.)
      allow delete: if isAdmin(); // Only admins can delete applications
      allow list: if isAdmin(); // Only admins can list all applications
    }
    
    // Contact forms and inquiries
    match /inquiries/{inquiryId} {
      allow create: if isValidInquiry(request.resource.data); // Anyone can submit valid inquiries
      allow read, list: if isAdmin(); // Only admins can view inquiries
      allow update, delete: if isAdmin(); // Only admins can manage inquiries
    }
    
    // Validate inquiry data structure
    function isValidInquiry(data) {
      return data.keys().hasAll(['name', 'phone', 'subject', 'message']) &&
             data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
             data.phone is string && data.phone.size() > 0 && data.phone.size() <= 20 &&
             data.subject is string && data.subject.size() > 0 && data.subject.size() <= 200 &&
             data.message is string && data.message.size() > 0 && data.message.size() <= 1000 &&
             (!data.keys().hasAny(['email']) || (data.email is string && data.email.matches('.*@.*\\..*')));
    }
    
    // Contact form submissions from website
    match /contact-submissions/{submissionId} {
      allow create: if isValidInquiry(request.resource.data); // Anyone can submit contact forms
      allow read, list: if isAdmin(); // Only admins can view submissions
      allow update: if isAdmin(); // Only admins can update (mark as read, etc.)
      allow delete: if isAdmin(); // Only admins can delete submissions
    }
    
    // Donations data
    match /donations/{donationId} {
      allow read: if true; // Public read for transparency
      allow write, create, delete, list: if isAuthenticated();
    }
    
    // Blood donors
    match /bloodDonors/{donorId} {
      allow read: if true; // Public read for emergency access
      allow write, create, delete, list: if isAuthenticated();
    }
    
    // Body donors
    match /bodyDonors/{donorId} {
      allow read, write, create, delete, list: if isAuthenticated();
    }
    
    // Financial donors
    match /financialDonors/{donorId} {
      allow read: if true; // Public read for transparency
      allow write, create, delete, list: if isAuthenticated();
    }
    
    // System settings and configuration
    match /settings/{settingId} {
      // Website settings should be readable by all for public display
      allow read: if settingId == 'website' || isAdmin();
      // Only admins can modify settings
      allow write, create, delete: if isAdmin();
      // Only admins can list all settings
      allow list: if isAdmin();
    }
    
    // Website settings validation function
    function isValidWebsiteSettings(data) {
      return data.keys().hasAll(['siteName', 'siteTitle', 'phone', 'email']) &&
             data.siteName is string && data.siteName.size() > 0 &&
             data.siteTitle is string && data.siteTitle.size() > 0 &&
             data.phone is string && data.phone.size() > 0 &&
             data.email is string && data.email.size() > 0 &&
             data.email.matches('.*@.*\\..*'); // Basic email validation
    }
    
    // Specific rule for website settings document
    match /settings/website {
      allow read: if true; // Public read access for website display
      allow write, update: if isAdmin() && isValidWebsiteSettings(request.resource.data);
      allow create: if isAdmin() && isValidWebsiteSettings(request.resource.data);
      allow delete: if false; // Website settings should never be deleted
    }
    
    // Work areas collection
    match /work-areas/{areaId} {
      allow read: if true; // Public read access
      allow write, create, delete, list: if isAdmin(); // Only admins can manage work areas
    }
    
    // Certificates collection
    match /certificates/{certificateId} {
      allow read, list: if true; // Public read access for displaying certificates
      allow create: if isAuthenticated() && isValidCertificate(request.resource.data); // Authenticated users can create certificates (temporary for development)
      allow update: if isAuthenticated() && isValidCertificate(request.resource.data); // Authenticated users can update certificates (temporary for development)
      allow delete: if isAuthenticated(); // Authenticated users can delete certificates (temporary for development)
      // TODO: Change back to isAdmin() for production
    }
    
    // Validate certificate data structure
    function isValidCertificate(data) {
      return data.keys().hasAll(['title', 'imageUrl']) &&
             data.title is string && data.title.size() > 0 && data.title.size() <= 200 &&
             data.imageUrl is string && data.imageUrl.size() > 0;
    }
    
    // Testimonials collection
    match /testimonials/{testimonialId} {
      allow read: if true; // Public read access
      allow write, create, delete, list: if isAdmin(); // Only admins can manage testimonials
    }
    
    // Statistics collection
    match /statistics/{statId} {
      allow read: if true; // Public read access for displaying stats
      allow write, create, delete, list: if isAdmin(); // Only admins can manage statistics
    }
    
    // Audit logs
    match /auditLogs/{logId} {
      allow read, list: if isAdmin(); // Only admins can read audit logs
      allow create: if isAuthenticated() && isValidAuditLog(request.resource.data); // Authenticated users can create valid logs
      allow update, delete: if false; // Audit logs should not be modified or deleted
    }
    
    // Validate audit log data structure
    function isValidAuditLog(data) {
      return data.keys().hasAll(['action', 'collection', 'timestamp', 'userId']) &&
             data.action is string && data.action.size() > 0 &&
             data.collection is string && data.collection.size() > 0 &&
             data.timestamp is timestamp &&
             data.userId is string && data.userId.size() > 0;
    }
    
    // Settings change logs (specific audit trail for settings)
    match /settingsLogs/{logId} {
      allow read, list: if isAdmin(); // Only admins can read settings logs
      allow create: if isAdmin() && isValidSettingsLog(request.resource.data); // Only admins can create settings logs
      allow update, delete: if false; // Settings logs should not be modified or deleted
    }
    
    // Validate settings log data structure
    function isValidSettingsLog(data) {
      return data.keys().hasAll(['action', 'settingKey', 'oldValue', 'newValue', 'timestamp', 'userId']) &&
             data.action in ['create', 'update', 'delete'] &&
             data.settingKey is string && data.settingKey.size() > 0 &&
             data.timestamp is timestamp &&
             data.userId is string && data.userId.size() > 0;
    }
  }
}