import { NextRequest, NextResponse } from 'next/server';
import { sendEmail, sendAdminNotification } from '@/lib/email';
import { 
  getLibraryApplicationAdminTemplate, 
  getLibraryApplicationUserTemplate,
  getContactFormAdminTemplate,
  getContactFormUserTemplate,
  LibraryApplicationData,
  ContactFormData
} from '@/lib/emailTemplates';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { type, data } = body;

    switch (type) {
      case 'library-application':
        return await handleLibraryApplication(data);
      case 'contact-form':
        return await handleContactForm(data);
      case 'test-email':
        return await handleTestEmail(data);
      default:
        return NextResponse.json(
          { success: false, message: 'Invalid email type' },
          { status: 400 }
        );
    }
  } catch (error) {
    console.error('Email API error:', error);
    return NextResponse.json(
      { success: false, message: 'Internal server error' },
      { status: 500 }
    );
  }
}

async function handleLibraryApplication(data: LibraryApplicationData) {
  try {
    // Send notification to admin
    const adminEmailSent = await sendAdminNotification(
      `ЁЯЖХ рдирдпрд╛ рдкреБрд╕реНрддрдХрд╛рд▓рдп рдЖрд╡реЗрджрди - ${data.applicationId}`,
      getLibraryApplicationAdminTemplate(data)
    );

    // Send confirmation to user
    const userEmailSent = await sendEmail({
      to: data.email,
      subject: `тЬЕ рдЖрд╡реЗрджрди рдкреНрд░рд╛рдкреНрдд - ${data.applicationId} | рдПрд░реЛрдЬреНрдЮрд╛ рдкреБрд╕реНрддрдХрд╛рд▓рдп`,
      html: getLibraryApplicationUserTemplate(data),
    });

    return NextResponse.json({
      success: true,
      message: 'Library application emails sent',
      details: {
        adminEmailSent,
        userEmailSent,
      },
    });
  } catch (error) {
    console.error('Library application email error:', error);
    return NextResponse.json(
      { success: false, message: 'Failed to send library application emails' },
      { status: 500 }
    );
  }
}

async function handleContactForm(data: ContactFormData) {
  try {
    // Send notification to admin
    const adminEmailSent = await sendAdminNotification(
      `ЁЯУз рдирдпрд╛ рд╕рдВрдкрд░реНрдХ рд╕рдВрджреЗрд╢ - ${data.subject}`,
      getContactFormAdminTemplate(data)
    );

    // Send confirmation to user
    const userEmailSent = await sendEmail({
      to: data.email,
      subject: `тЬЕ рд╕рдВрджреЗрд╢ рдкреНрд░рд╛рдкреНрдд рд╣реБрдЖ - ${data.subject} | рдПрд░реЛрдЬреНрдЮрд╛ рдкреБрд╕реНрддрдХрд╛рд▓рдп`,
      html: getContactFormUserTemplate(data),
    });

    return NextResponse.json({
      success: true,
      message: 'Contact form emails sent',
      details: {
        adminEmailSent,
        userEmailSent,
      },
    });
  } catch (error) {
    console.error('Contact form email error:', error);
    return NextResponse.json(
      { success: false, message: 'Failed to send contact form emails' },
      { status: 500 }
    );
  }
}

async function handleTestEmail(data: { email: string }) {
  try {
    // First test the SMTP configuration
    const { testEmailConfig } = await import('@/lib/email');
    const testResult = await testEmailConfig();
    
    if (!testResult.success) {
      return NextResponse.json({
        success: false,
        message: testResult.message,
      });
    }

    // If SMTP test passes, send actual test email
    const emailSent = await sendEmail({
      to: data.email,
      subject: 'тЬЕ SMTP Test Email - рдПрд░реЛрдЬреНрдЮрд╛ рдкреБрд╕реНрддрдХрд╛рд▓рдп',
      html: `
        <div style="font-family: Arial, sans-serif; padding: 20px; max-width: 600px; margin: 0 auto;">
          <div style="background: linear-gradient(135deg, #f97316, #dc2626); color: white; padding: 20px; text-align: center; border-radius: 8px;">
            <h1>тЬЕ SMTP Configuration Test</h1>
            <p>рдпрджрд┐ рдЖрдк рдпрд╣ рдИрдореЗрд▓ рджреЗрдЦ рд░рд╣реЗ рд╣реИрдВ, рддреЛ рдЖрдкрдХрд╛ SMTP рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди рд╕рд╣реА рддрд░реАрдХреЗ рд╕реЗ рдХрд╛рдо рдХрд░ рд░рд╣рд╛ рд╣реИ!</p>
          </div>
          <div style="padding: 20px; background: #f9fafb; border: 1px solid #e5e7eb;">
            <p><strong>рдкрд░реАрдХреНрд╖рдг рд╕рдлрд▓!</strong></p>
            <p>рдЖрдкрдХрд╛ рдИрдореЗрд▓ рд╕рд┐рд╕реНрдЯрдо рддреИрдпрд╛рд░ рд╣реИ рдФрд░ рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рд╕реБрд╡рд┐рдзрд╛рдПрдВ рдЙрдкрд▓рдмреНрдз рд╣реИрдВ:</p>
            <ul>
              <li>рдкреБрд╕реНрддрдХрд╛рд▓рдп рдЖрд╡реЗрджрди рд╕реВрдЪрдирд╛рдПрдВ</li>
              <li>рд╕рдВрдкрд░реНрдХ рдлреЙрд░реНрдо рд╕реВрдЪрдирд╛рдПрдВ</li>
              <li>рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдкреБрд╖реНрдЯрд┐рдХрд░рдг рдИрдореЗрд▓</li>
              <li>рд╡реНрдпрд╡рд╕реНрдерд╛рдкрдХ рд╕реВрдЪрдирд╛рдПрдВ</li>
            </ul>
          </div>
          <div style="background: #374151; color: white; padding: 15px; text-align: center; border-radius: 0 0 8px 8px;">
            <p>рдПрд░реЛрдЬреНрдЮрд╛ рдкреБрд╕реНрддрдХрд╛рд▓рдп рдПрд╡рдВ рд╕реЗрд╡рд╛ рд╕рдВрд╕реНрдерд╛</p>
            <p>Email System Test - ${new Date().toLocaleString('hi-IN')}</p>
          </div>
        </div>
      `,
    });

    return NextResponse.json({
      success: emailSent,
      message: emailSent ? 'Test email sent successfully! Please check your inbox.' : 'SMTP connection successful but failed to send email. Please check your email address.',
    });
  } catch (error) {
    console.error('Test email error:', error);
    return NextResponse.json({
      success: false,
      message: `Test email failed: ${error instanceof Error ? error.message : 'Unknown error'}`,
    });
  }
}