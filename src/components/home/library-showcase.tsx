"use client";

import React, { useState, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { BookOpen, Search, Download, Users, Clock, ArrowRight, Star } from "lucide-react";
import Link from "next/link";
import { 
  collection, 
  query, 
  orderBy, 
  limit, 
  onSnapshot, 
  where,
  getDocs
} from 'firebase/firestore';
import { db } from '@/lib/firebase';

interface BookCategory {
  id: string;
  name: string;
  description: string;
  color: string;
  isActive: boolean;
  bookCount: number;
  order: number;
}

interface Book {
  id: string;
  title: string;
  author: string;
  category: string;
  availableCopies: number;
  totalCopies: number;
  issuedCopies: number;
  rating?: number;
  description?: string;
  coverImage?: string;
  createdAt: Date | { seconds: number; nanoseconds: number };
}

export function LibraryShowcase() {
  const [bookCategories, setBookCategories] = useState<BookCategory[]>([]);
  const [featuredBooks, setFeaturedBooks] = useState<Book[]>([]);
  const [libraryStats, setLibraryStats] = useState({
    totalBooks: 0,
    totalCopies: 0,
    availableCopies: 0,
    activeMembers: 500,
    monthlyIssues: 0,
    rating: 4.9
  });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchLibraryData();
    const cleanup = setupRealTimeListeners();
    return cleanup;
  }, []);

  const setupRealTimeListeners = () => {
    // Real-time listener for categories
    const categoriesQuery = query(
      collection(db, 'book-categories'),
      where('isActive', '==', true),
      orderBy('order', 'asc'),
      limit(6)
    );

    const unsubscribeCategories = onSnapshot(
      categoriesQuery, 
      (snapshot) => {
        const categoriesData = snapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        })) as BookCategory[];
        
        setBookCategories(categoriesData);
      },
      (error) => {
        console.error('Error fetching categories:', error);
        // Set fallback sample data when database is not accessible
        setBookCategories([
          { id: 'sample-1', name: "‡§ß‡§æ‡§∞‡•ç‡§Æ‡§ø‡§ï ‡§∏‡§æ‡§π‡§ø‡§§‡•ç‡§Ø", bookCount: 450, color: "orange", description: "‡§ß‡§æ‡§∞‡•ç‡§Æ‡§ø‡§ï ‡§ó‡•ç‡§∞‡§Ç‡§• ‡§î‡§∞ ‡§Ü‡§ß‡•ç‡§Ø‡§æ‡§§‡•ç‡§Æ‡§ø‡§ï ‡§™‡•Å‡§∏‡•ç‡§§‡§ï‡•á‡§Ç", isActive: true, order: 1 },
          { id: 'sample-2', name: "‡§∂‡•à‡§ï‡•ç‡§∑‡§£‡§ø‡§ï ‡§™‡•Å‡§∏‡•ç‡§§‡§ï‡•á‡§Ç", bookCount: 680, color: "blue", description: "‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® ‡§µ‡§ø‡§∑‡§Ø‡•ã‡§Ç ‡§ï‡•Ä ‡§∂‡•à‡§ï‡•ç‡§∑‡§£‡§ø‡§ï ‡§∏‡§æ‡§Æ‡§ó‡•ç‡§∞‡•Ä", isActive: true, order: 2 },
          { id: 'sample-3', name: "‡§â‡§™‡§®‡•ç‡§Ø‡§æ‡§∏", bookCount: 320, color: "purple", description: "‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§î‡§∞ ‡§Ö‡§®‡•ç‡§Ø ‡§≠‡§æ‡§∑‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§â‡§™‡§®‡•ç‡§Ø‡§æ‡§∏", isActive: true, order: 3 },
          { id: 'sample-4', name: "‡§¨‡§æ‡§≤ ‡§∏‡§æ‡§π‡§ø‡§§‡•ç‡§Ø", bookCount: 280, color: "green", description: "‡§¨‡§ö‡•ç‡§ö‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∞‡•ã‡§ö‡§ï ‡§ï‡§π‡§æ‡§®‡§ø‡§Ø‡§æ‡§Ç", isActive: true, order: 4 }
        ]);
      }
    );

    // Cleanup function
    return () => {
      unsubscribeCategories();
    };
  };

  const fetchLibraryData = async () => {
    try {

      // Fetch featured books
      const booksQuery = query(
        collection(db, 'books'),
        orderBy('createdAt', 'desc'),
        limit(3)
      );
      
      const booksSnapshot = await getDocs(booksQuery);
      const booksData = booksSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      })) as Book[];
      
      setFeaturedBooks(booksData);

      // Calculate stats from all books
      const allBooksQuery = query(collection(db, 'books'));
      const allBooksSnapshot = await getDocs(allBooksQuery);
      
      let totalBooks = 0;
      let totalCopies = 0;
      let availableCopies = 0;
      let issuedCopies = 0;

      allBooksSnapshot.docs.forEach(doc => {
        const book = doc.data();
        totalBooks++;
        totalCopies += book.totalCopies || 0;
        availableCopies += book.availableCopies || 0;
        issuedCopies += book.issuedCopies || 0;
      });

      setLibraryStats({
        totalBooks,
        totalCopies,
        availableCopies,
        activeMembers: 500, // This could be fetched from members collection
        monthlyIssues: issuedCopies,
        rating: 4.9
      });

    } catch (error) {
      console.error('Error fetching library data:', error);
      // Don't set fallback data, let the component show empty state
    } finally {
      setLoading(false);
    }
  };

  const getColorClass = (color: string) => {
    switch (color) {
      case 'orange': return 'bg-orange-100 text-orange-800';
      case 'blue': return 'bg-blue-100 text-blue-800';
      case 'purple': return 'bg-purple-100 text-purple-800';
      case 'green': return 'bg-green-100 text-green-800';
      case 'red': return 'bg-red-100 text-red-800';
      case 'yellow': return 'bg-yellow-100 text-yellow-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const displayStats = [
    { icon: <BookOpen className="w-6 h-6" />, count: `${libraryStats.totalBooks}+`, label: "‡§™‡•Å‡§∏‡•ç‡§§‡§ï‡•á‡§Ç ‡§â‡§™‡§≤‡§¨‡•ç‡§ß" },
    { icon: <Users className="w-6 h-6" />, count: `${libraryStats.activeMembers}+`, label: "‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§∏‡§¶‡§∏‡•ç‡§Ø" },
    { icon: <Download className="w-6 h-6" />, count: `${libraryStats.monthlyIssues}+`, label: "‡§ï‡•Å‡§≤ ‡§á‡§∂‡•ç‡§Ø‡•Ç" },
    { icon: <Star className="w-6 h-6" />, count: `${libraryStats.rating}/5`, label: "‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§∞‡•á‡§ü‡§ø‡§Ç‡§ó" }
  ];

  if (loading) {
    return (
      <section className="py-16 bg-gradient-to-br from-indigo-50 via-white to-cyan-50">
        <div className="container mx-auto px-4">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
            <p className="mt-2 text-gray-600">‡§™‡•Å‡§∏‡•ç‡§§‡§ï‡§æ‡§≤‡§Ø ‡§°‡•á‡§ü‡§æ ‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...</p>
          </div>
        </div>
      </section>
    );
  }

  return (
    <section className="py-16 bg-gradient-to-br from-indigo-50 via-white to-cyan-50">
      <div className="container mx-auto px-4">
        <div className="text-center mb-12">
          <h2 className="text-3xl md:text-4xl font-bold text-gray-800 mb-4">
            üìö ‡§π‡§Æ‡§æ‡§∞‡§æ ‡§™‡•Å‡§∏‡•ç‡§§‡§ï‡§æ‡§≤‡§Ø
          </h2>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            2000+ ‡§™‡•Å‡§∏‡•ç‡§§‡§ï‡•ã‡§Ç ‡§ï‡§æ ‡§µ‡§ø‡§∂‡§æ‡§≤ ‡§∏‡§Ç‡§ó‡•ç‡§∞‡§π - ‡§®‡§ø‡§É‡§∂‡•Å‡§≤‡•ç‡§ï ‡§∏‡§¶‡§∏‡•ç‡§Ø‡§§‡§æ ‡§î‡§∞ ‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§è‡§Ç
          </p>
        </div>

        {/* Library Stats */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mb-12">
          {displayStats.map((stat, index) => (
            <Card key={index} className="text-center hover:shadow-lg transition-shadow duration-300">
              <CardContent className="p-6">
                <div className="text-blue-600 mb-3 flex justify-center">
                  {stat.icon}
                </div>
                <div className="text-2xl font-bold text-gray-800 mb-1">
                  {stat.count}
                </div>
                <div className="text-sm text-gray-600">
                  {stat.label}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 mb-12">
          {/* Book Categories */}
          <div>
            <h3 className="text-2xl font-bold text-gray-800 mb-6">
              üìñ ‡§™‡•Å‡§∏‡•ç‡§§‡§ï ‡§∂‡•ç‡§∞‡•á‡§£‡§ø‡§Ø‡§æ‡§Ç
            </h3>
            <div className="space-y-4">
              {bookCategories.length === 0 ? (
                <div className="text-center py-8">
                  <BookOpen className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <p className="text-gray-600">‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§ï‡•ã‡§à ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä</p>
                  <p className="text-sm text-gray-500">‡§è‡§°‡§Æ‡§ø‡§® ‡§™‡•à‡§®‡§≤ ‡§∏‡•á ‡§∂‡•ç‡§∞‡•á‡§£‡§ø‡§Ø‡§æ‡§Ç ‡§ú‡•ã‡§°‡§º‡•á‡§Ç</p>
                </div>
              ) : (
                bookCategories.map((category) => {
                  const maxCount = Math.max(...bookCategories.map(c => c.bookCount));
                  const percentage = maxCount > 0 ? (category.bookCount / maxCount) * 100 : 0;
                  
                  return (
                    <Link key={category.id} href={`/library?category=${category.id}`}>
                      <div className="flex items-center justify-between p-4 bg-white rounded-lg shadow-sm hover:shadow-md transition-all duration-300 cursor-pointer group">
                        <div className="flex items-center">
                          <Badge className={`${getColorClass(category.color)} mr-3 group-hover:scale-105 transition-transform`}>
                            {category.bookCount}
                          </Badge>
                          <span className="font-medium text-gray-800 group-hover:text-blue-600 transition-colors">
                            {category.name}
                          </span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <div className="w-20 bg-gray-200 rounded-full h-2">
                            <div
                              className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                              style={{ width: `${Math.min(percentage, 100)}%` }}
                            ></div>
                          </div>
                          <ArrowRight className="w-4 h-4 text-gray-400 group-hover:text-blue-600 transition-colors" />
                        </div>
                      </div>
                    </Link>
                  );
                })
              )}
            </div>
          </div>

          {/* Featured Books */}
          <div>
            <h3 className="text-2xl font-bold text-gray-800 mb-6">
              ‚≠ê ‡§≤‡•ã‡§ï‡§™‡•ç‡§∞‡§ø‡§Ø ‡§™‡•Å‡§∏‡•ç‡§§‡§ï‡•á‡§Ç
            </h3>
            <div className="space-y-4">
              {featuredBooks.length === 0 ? (
                <div className="text-center py-8">
                  <BookOpen className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <p className="text-gray-600">‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§ï‡•ã‡§à ‡§™‡•Å‡§∏‡•ç‡§§‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä</p>
                  <p className="text-sm text-gray-500">‡§è‡§°‡§Æ‡§ø‡§® ‡§™‡•à‡§®‡§≤ ‡§∏‡•á ‡§™‡•Å‡§∏‡•ç‡§§‡§ï‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡•á‡§Ç</p>
                </div>
              ) : (
                featuredBooks.map((book) => (
                  <Card key={book.id} className="hover:shadow-lg transition-shadow duration-300">
                    <CardContent className="p-4">
                      <div className="flex justify-between items-start mb-2">
                        <h4 className="font-semibold text-gray-800 line-clamp-1">
                          {book.title}
                        </h4>
                        <Badge
                          variant={book.availableCopies > 0 ? "default" : "destructive"}
                          className="text-xs"
                        >
                          {book.availableCopies > 0 ? "‡§â‡§™‡§≤‡§¨‡•ç‡§ß" : "‡§á‡§∂‡•ç‡§Ø‡•Ç ‡§Æ‡•á‡§Ç"}
                        </Badge>
                      </div>
                      <p className="text-sm text-gray-600 mb-2">
                        ‡§≤‡•á‡§ñ‡§ï: {book.author}
                      </p>
                      {book.description && (
                        <p className="text-xs text-gray-500 mb-3 line-clamp-2">
                          {book.description}
                        </p>
                      )}
                      <div className="flex items-center justify-between">
                        <div className="flex items-center">
                          {book.rating ? (
                            <>
                              {[...Array(book.rating)].map((_, i) => (
                                <Star key={i} className="w-3 h-3 text-yellow-400 fill-current" />
                              ))}
                              <span className="text-xs text-gray-500 ml-1">({book.rating}/5)</span>
                            </>
                          ) : (
                            <span className="text-xs text-gray-500">
                              {book.availableCopies}/{book.totalCopies} ‡§â‡§™‡§≤‡§¨‡•ç‡§ß
                            </span>
                          )}
                        </div>
                        <Badge variant="outline" className="text-xs">
                          {book.category}
                        </Badge>
                      </div>
                    </CardContent>
                  </Card>
                ))
              )}
            </div>
          </div>
        </div>

        {/* Library Services */}
        <div className="bg-white rounded-2xl p-8 shadow-lg mb-12">
          <h3 className="text-2xl font-bold text-center text-gray-800 mb-8">
            üéØ ‡§™‡•Å‡§∏‡•ç‡§§‡§ï‡§æ‡§≤‡§Ø ‡§∏‡•á‡§µ‡§æ‡§è‡§Ç
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <div className="text-center">
              <div className="bg-blue-100 rounded-full p-4 w-16 h-16 mx-auto mb-4 flex items-center justify-center">
                <BookOpen className="w-8 h-8 text-blue-600" />
              </div>
              <h4 className="font-semibold text-gray-800 mb-2">‡§®‡§ø‡§É‡§∂‡•Å‡§≤‡•ç‡§ï ‡§∏‡§¶‡§∏‡•ç‡§Ø‡§§‡§æ</h4>
              <p className="text-sm text-gray-600">
                ‡§ï‡•ã‡§à ‡§∂‡•Å‡§≤‡•ç‡§ï ‡§®‡§π‡•Ä‡§Ç, ‡§ï‡•á‡§µ‡§≤ ‡§™‡§π‡§ö‡§æ‡§® ‡§™‡§§‡•ç‡§∞ ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ
              </p>
            </div>
            <div className="text-center">
              <div className="bg-green-100 rounded-full p-4 w-16 h-16 mx-auto mb-4 flex items-center justify-center">
                <Search className="w-8 h-8 text-green-600" />
              </div>
              <h4 className="font-semibold text-gray-800 mb-2">‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§ï‡•à‡§ü‡§≤‡•â‡§ó</h4>
              <p className="text-sm text-gray-600">
                ‡§ë‡§®‡§≤‡§æ‡§á‡§® ‡§™‡•Å‡§∏‡•ç‡§§‡§ï ‡§ñ‡•ã‡§ú ‡§î‡§∞ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡§§‡§æ ‡§ú‡§æ‡§Ç‡§ö
              </p>
            </div>
            <div className="text-center">
              <div className="bg-purple-100 rounded-full p-4 w-16 h-16 mx-auto mb-4 flex items-center justify-center">
                <Clock className="w-8 h-8 text-purple-600" />
              </div>
              <h4 className="font-semibold text-gray-800 mb-2">‡§≤‡§ö‡•Ä‡§≤‡§æ ‡§∏‡§Æ‡§Ø</h4>
              <p className="text-sm text-gray-600">
                ‡§∏‡•Å‡§¨‡§π 9:00 ‡§∏‡•á ‡§∂‡§æ‡§Æ 6:00 ‡§§‡§ï ‡§ñ‡•Å‡§≤‡§æ
              </p>
            </div>
          </div>
        </div>

        {/* New Library Building */}
        <div className="bg-gradient-to-r from-green-600 to-blue-600 rounded-2xl p-8 text-white mb-8">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 items-center">
            <div>
              <h3 className="text-2xl font-bold mb-4">
                üèóÔ∏è ‡§®‡§Ø‡§æ ‡§™‡•Å‡§∏‡•ç‡§§‡§ï‡§æ‡§≤‡§Ø ‡§≠‡§µ‡§® ‡§Ü ‡§∞‡§π‡§æ ‡§π‡•à!
              </h3>
              <p className="text-green-100 mb-4">
                35 ‡§≤‡§æ‡§ñ ‡§∞‡•Å‡§™‡§è ‡§ï‡•Ä ‡§≤‡§æ‡§ó‡§§ ‡§∏‡•á ‡§¨‡§® ‡§∞‡§π‡§æ ‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§™‡•Å‡§∏‡•ç‡§§‡§ï‡§æ‡§≤‡§Ø ‡§≠‡§µ‡§® ‡§ú‡•Ç‡§® 2024 ‡§Æ‡•á‡§Ç ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•ã‡§ó‡§æ‡•§
              </p>
              <ul className="space-y-2 text-sm text-green-100 mb-6">
                <li>‚úì 5000+ ‡§™‡•Å‡§∏‡•ç‡§§‡§ï‡•ã‡§Ç ‡§ï‡•Ä ‡§ï‡•ç‡§∑‡§Æ‡§§‡§æ</li>
                <li>‚úì ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§≤‡§æ‡§á‡§¨‡•ç‡§∞‡•á‡§∞‡•Ä ‡§∏‡•á‡§ï‡•ç‡§∂‡§®</li>
                <li>‚úì 100 ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§∞‡•Ä‡§°‡§ø‡§Ç‡§ó ‡§π‡•â‡§≤</li>
                <li>‚úì ‡§∏‡•á‡§Æ‡§ø‡§®‡§æ‡§∞ ‡§π‡•â‡§≤ ‡§î‡§∞ ‡§ï‡§Ç‡§™‡•ç‡§Ø‡•Ç‡§ü‡§∞ ‡§≤‡•à‡§¨</li>
              </ul>
              <div className="flex flex-col sm:flex-row gap-4">
                <Button variant="secondary" size="lg">
                  ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§¶‡•á‡§ñ‡•á‡§Ç
                </Button>
                <Button variant="outline" size="lg" className="text-white border-white hover:bg-white hover:text-green-600">
                  ‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç
                </Button>
              </div>
            </div>
            <div className="text-center">
              <img
                src="/api/placeholder/400/300"
                alt="‡§®‡§Ø‡§æ ‡§™‡•Å‡§∏‡•ç‡§§‡§ï‡§æ‡§≤‡§Ø ‡§≠‡§µ‡§®"
                className="rounded-lg shadow-lg w-full h-auto"
              />
              <div className="mt-4 bg-white bg-opacity-20 rounded-lg p-4">
                <div className="text-2xl font-bold">75%</div>
                <div className="text-sm">‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£ ‡§™‡•Ç‡§∞‡•ç‡§£</div>
              </div>
            </div>
          </div>
        </div>

        {/* CTA Buttons */}
        <div className="text-center">
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Link href="/library">
              <Button size="lg" className="bg-blue-600 hover:bg-blue-700">
                ‡§™‡•Å‡§∏‡•ç‡§§‡§ï ‡§∏‡•Ç‡§ö‡•Ä ‡§¶‡•á‡§ñ‡•á‡§Ç
                <ArrowRight className="w-4 h-4 ml-2" />
              </Button>
            </Link>
            <Link href="/register">
              <Button size="lg" variant="outline">
                ‡§≤‡§æ‡§á‡§¨‡•ç‡§∞‡•á‡§∞‡•Ä ‡§ï‡§æ‡§∞‡•ç‡§° ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§µ‡•á‡§¶‡§® ‡§ï‡§∞‡•á‡§Ç
              </Button>
            </Link>
          </div>
        </div>
      </div>
    </section>
  );
}